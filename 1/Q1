import java.io.*;
import java.util.*;

public class Q1 {

    public static int evaluateExpression(int[] nums, char[] ops) {
        int result = nums[0];
        for (int i = 1; i < nums.length; i++) {
            switch (ops[i - 1]) {
                case '+':
                    result += nums[i];
                    break;
                case '-':
                    result -= nums[i];
                    break;
                case '*':
                    result *= nums[i];
                    break;
            }
        }
        return result;
    }




    public static void generateOperatorPermutations(List<Character> operators, char[] currentOps, boolean[] used, int idx, int[] nums, List<Integer> results) {
        if (idx == currentOps.length) {
            // 연산자 조합이 완성되었을 때 결과 계산
            int result = evaluateExpression(nums, currentOps);
            results.add(result);
            return;
        }

        for (int i = 0; i < operators.size(); i++) {
            if (!used[i]) {
                used[i] = true;
                currentOps[idx] = operators.get(i);
                generateOperatorPermutations(operators, currentOps, used, idx + 1, nums, results);
                used[i] = false;
            }
        }
    }

    public static void findMinMax(int[] nums, int addCount, int subCount, int mulCount){
        List<Integer> results = new ArrayList<>();
        List<Character> operators = new ArrayList<>();

        for (int i = 0; i < addCount; i++) operators.add('+');
        for (int i = 0; i < subCount; i++) operators.add('-');
        for (int i = 0; i < mulCount; i++) operators.add('*');

        char[] currentOps = new char[nums.length - 1];
        boolean[] used = new boolean[operators.size()];

        generateOperatorPermutations(operators, currentOps, used, 0 ,nums, results);

        int minVal = Integer.MAX_VALUE;
        int maxVal = Integer.MIN_VALUE;

        for (int result : results) {
            if (result < minVal) {
                minVal = result;
            }
            if (result > maxVal) {
                maxVal = result;
            }
        }

        System.out.println(minVal + " " + maxVal);

    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int n = Integer.parseInt(br.readLine());
        int [] nums = new int[n];

        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        for (int i = 0; i < n; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        st = new StringTokenizer(br.readLine(), " ");
        int addCount = Integer.parseInt(st.nextToken());
        int subCount = Integer.parseInt(st.nextToken());
        int mulCount = Integer.parseInt(st.nextToken());

        findMinMax(nums, addCount, subCount, mulCount);
    }
}
